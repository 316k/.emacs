(setq special-chars
      (mapcar (lambda (x) (cons (car x) (symbol-name (cadr x))))
              '((intersect ∩)
                (union ∪)
                (empty_set ∅)
                (void ∅)
                (element ∈)
                (sum ∑)
                (Sum ∑)
                (Sigma ∑)
                (sigma σ)
                (not_element ∉)
                (foreach ∀)
                (forall ∀)
                (subset_equal ⊆)
                (subset_or_equal ⊆)
                (subset_eq ⊆)
                (subset ⊂)
                (exists ∃)
                (approx ≈)
                (congru ≡)
                (equivalent ≡)
                (eq ≡)
                (dot ⋅)
                (product Π)
                (nu       ν)
                (xi       ξ)
                (omicron  ο)
                (pi       π)
                (rho      ρ)
                (sigma    σ)
                (tau      τ)
                (upsilon  υ)
                (phi      φ)
                (chi      χ)
                (psi      ψ)
                (omega    ω)
                (alpha    α)
                (beta     β)
                (gamma    γ)
                (delta    δ)
                (epsilon  ε)
                (zeta     ζ)
                (eta      η)
                (theta    θ)
                (iota     ι)
                (kappa    κ)
                (lambda   λ)
                (mu       μ)
                (Nu       Ν)
                (Xi       Ξ)
                (Omicron  Ο)
                (Pi       Π)
                (Rho      Ρ)
                (Sigma    Σ)
                (Tau      Τ)
                (Upsilon  Υ)
                (Phi      Φ)
                (Chi      Χ)
                (Psi      Ψ)
                (Omega    Ω)
                (Alpha    Α)
                (Beta     Β)
                (Gamma    Γ)
                (Delta    Δ)
                (Epsilon  Ε)
                (Zeta     Ζ)
                (Eta      Η)
                (Theta    Θ)
                (Iota     Ι)
                (Kappa    Κ)
                (Lambda   Λ)
                (Mu       Μ)
                (automate ⟼)
                (gte ≥)
                (lte ≤)
                (not_equals ≠)
                (infinity ∞)
                (not ¬)
                (or ∨)
                (and ∧)
                (xor ⊕)
                (proves ⊢)
                (sqrt √)
                (CQFD □)
                (QED □)
                (naturals ℕ)
                (integers ℤ)
                (reals ℝ)
                (Reals ℝ)
                (rationals ℚ)
                (check ✔)
                (TF ⇋)
                (TM ™)
                (cross †)
                (sub0 ₀)
                (sub1 ₁)
                (sub2 ₂)
                (sub3 ₃)
                (sub4 ₄)
                (sub5 ₅)
                (sub6 ₆)
                (sub7 ₇)
                (sub8 ₈)
                (sub9 ₉)
                (sub+ ₊)
                (sub- ₋)
                (sub= ₌)
                (subi ᵢ)
                (subj ⱼ)
                (subk ₖ)
                (subl ₗ)
                )))

(defun word-to-special-char ()
  "Transforms an ASCII word into an UTF-8 symbol"
  (interactive)
  (let ((len 0))
    (save-excursion
      (let ((bounds (bounds-of-thing-at-point 'word))
            (thing (thing-at-point 'word)))
        (delete-region (car bounds) (cdr bounds))
        (goto-char (car bounds))
        (let ((char (alist-get (intern thing) special-chars thing)))

          (when (eq char thing)
            (message "Not found : %s" thing))

          (insert char)
          (setq len (length char))
          )))
    (forward-char len)))

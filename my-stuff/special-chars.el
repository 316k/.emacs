(setq special-chars
      (mapcar (lambda (x) (cons (car x) (symbol-name (cadr x))))
              '((intersect ∩)
                (union ∪)
                (empty_set ∅)
                (void ∅)
                (element ∈)
                (sum ∑)
                (Sigma ∑)
                (sigma σ)
                (not_element ∉)
                (foreach ∀)
                (forall ∀)
                (subset_equal ⊆)
                (subset_or_equal ⊆)
                (subset_eq ⊆)
                (subset ⊂)
                (exists ∃)
                (approx ≈)
                (congru ≡)
                (equivalent ≡)
                (Delta Δ)
                (delta δ)
                (mu μ)
                (lambda λ)
                (rho ρ)
                (epsilon ε)
                (alpha α)
                (beta β)
                (Theta Θ)
                (theta θ)
                (pi π)
                (Pi Π)
                (product Π)
                (phi φ)
                (Omega Ω)
                (omega ω)
                (automate ⟼)
                (gte ≥)
                (lte ≤)
                (not_equals ≠)
                (infinity ∞)
                (not ¬)
                (or ∨)
                (and ∧)
                (xor ⊕)
                (proves ⊢)
                (sqrt √)
                (CQFD □)
                (QED □)
                (naturals ℕ)
                (integers ℤ)
                (reals ℝ)
                (rationals ℚ)
                (check ✔)
                (TF ⇋)
                (TM ™)
                )))

(defun word-to-special-char ()
  "Transforms an ASCII word into an UTF-8 symbol"
  (interactive)
  (setq len 0)
  (save-excursion
    (let ((bounds (bounds-of-thing-at-point 'word))
          (thing (thing-at-point 'word)))
      (delete-region (car bounds) (cdr bounds))
      (goto-char (car bounds))
      (let ((char (alist-get (intern thing) special-chars thing)))
        (insert char)
        (setq len (length char))
        )))
  (forward-char len))
